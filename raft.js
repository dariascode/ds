// raft.js
const axios = require('axios');
const logger = require('./logger');

class RaftNode {
    constructor(config) {
        this.id = config.id;
        this.peers = config.peers;
        this.state = 'follower';
        this.currentTerm = 0;
        this.votedFor = null;
        this.votesReceived = 0;

        this.electionTimeout = null;
        this.heartbeatInterval = null;

        this.startElectionTimer();
    }

    startElectionTimer() {
        const timeout = 150 + Math.random() * 150; // 150‚Äì300ms
        clearTimeout(this.electionTimeout);
        this.electionTimeout = setTimeout(() => this.startElection(), timeout);
    }

    async startElection() {
        this.state = 'candidate';
        this.currentTerm++;
        this.votedFor = this.id;
        this.votesReceived = 1;

        logger.info(`[${this.id}] üó≥ –°—Ç–∞—Ä—Ç –≤—ã–±–æ—Ä–æ–≤ (term ${this.currentTerm})`);

        const voteRequest = {
            term: this.currentTerm,
            candidateId: this.id
        };

        for (const peer of this.peers) {
            try {
                const res = await axios.post(`${peer}/raft/vote`, voteRequest);
                if (res.data.voteGranted) {
                    this.votesReceived++;
                    logger.info(`[${this.id}] ‚úÖ –ü–æ–ª—É—á–∏–ª –≥–æ–ª–æ—Å –æ—Ç ${peer}`);
                }
            } catch {
                logger.warn(`[${this.id}] ‚ö†Ô∏è –ù–µ –ø–æ–ª—É—á–∏–ª –æ—Ç–≤–µ—Ç –æ—Ç ${peer}`);
            }
        }

        const majority = Math.floor(this.peers.length / 2) + 1;
        if (this.votesReceived >= majority) {
            this.becomeLeader();
        } else {
            logger.info(`[${this.id}] ‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≥–æ–ª–æ—Å–æ–≤, –æ—Å—Ç–∞—é—Å—å –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–º`);
            this.startElectionTimer(); // —Å–Ω–æ–≤–∞ –ø–æ–¥–æ–∂–¥—ë–º –∏ –ø–æ–ø—Ä–æ–±—É–µ–º
        }
    }

    becomeLeader() {
        this.state = 'leader';
        logger.info(`[${this.id}] üëë –°—Ç–∞–Ω–æ–≤–ª—é—Å—å –ª–∏–¥–µ—Ä–æ–º (term ${this.currentTerm})`);
        this.sendHeartbeats();
        this.heartbeatInterval = setInterval(() => this.sendHeartbeats(), 100);
    }

    async sendHeartbeats() {
        for (const peer of this.peers) {
            try {
                await axios.post(`${peer}/raft/heartbeat`, {
                    term: this.currentTerm,
                    leaderId: this.id
                });
            } catch {
                logger.warn(`[${this.id}] ‚ö†Ô∏è –ù–µ –º–æ–≥—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å heartbeat ‚Üí ${peer}`);
            }
        }
    }

    handleVoteRequest(req, res) {
        const { term, candidateId } = req.body;
        let voteGranted = false;

        if (term >= this.currentTerm && this.votedFor === null) {
            this.votedFor = candidateId;
            this.currentTerm = term;
            this.state = 'follower';
            this.startElectionTimer();
            voteGranted = true;
            logger.info(`[${this.id}] ü§ù –ì–æ–ª–æ—Å—É—é –∑–∞ ${candidateId} (term ${term})`);
        }

        res.json({ voteGranted });
    }

    handleHeartbeat(req, res) {
        const { term, leaderId } = req.body;
        if (term >= this.currentTerm) {
            this.currentTerm = term;
            this.votedFor = null;
            this.state = 'follower';
            this.startElectionTimer();
            logger.info(`[${this.id}] ‚ù§Ô∏è –ü–æ–ª—É—á–µ–Ω heartbeat –æ—Ç ${leaderId} (term ${term})`);
        }
        res.sendStatus(200);
    }
}

module.exports = RaftNode;
