#!/usr/bin/env node
// beeDBd.js ‚Äî —É—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è beeDB (RP + DN)

const { Command } = require('commander');
const axios = require('axios');
const { exec } = require('child_process');
const pkg = require('./package.json');

const RP_URL = 'http://localhost:8000';
const RP_SCRIPT = 'src/reverse-proxy/reverse-proxy.js';
const STARTUP_WAIT_MS = 2000;

const cli = new Command();
cli.version(pkg.version);

// –ö–æ–º–∞–Ω–¥–∞ start: —Å–Ω–∞—á–∞–ª–∞ RP, –ø–æ—Ç–æ–º DN —á–µ—Ä–µ–∑ RP
cli
    .command('start')
    .description('–ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–ª–∞—Å—Ç–µ—Ä (RP + DN)')
    .action(() => {
        console.log('‚û°Ô∏è  –°—Ç–∞—Ä—Ç RP —á–µ—Ä–µ–∑ forever...');
        exec(`npx cross-env RP_ID=rp forever start ${RP_SCRIPT}`, err => {
            if (err) {
                console.error('‚ùå RP –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å:', err.message);
                process.exit(1);
            }
            console.log(`‚úÖ RP –∑–∞–ø—É—â–µ–Ω, –∂–¥—ë–º ${STARTUP_WAIT_MS / 1000}s –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏...`);
            setTimeout(async () => {
                try {
                    const r = await axios.get(`${RP_URL}/admin/start`);
                    console.log('‚úÖ', r.data.data.message);
                } catch (e) {
                    const info = e.response ? JSON.stringify(e.response.data) : e.message;
                    console.error('‚ùå –û—à–∏–±–∫–∞ —Å—Ç–∞—Ä—Ç–∞ DN:', info);
                    process.exit(1);
                }
            }, STARTUP_WAIT_MS);
        });
    });

// –ö–æ–º–∞–Ω–¥–∞ stop: —Å–Ω–∞—á–∞–ª–∞ DN, –ø–æ—Ç–æ–º RP
cli
    .command('stop')
    .description('–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–ª–∞—Å—Ç–µ—Ä (DN + RP)')
    .action(async () => {
        try {
            const r = await axios.get(`${RP_URL}/admin/stop`);
            console.log('‚úÖ', r.data.data.message);
        } catch (e) {
            const info = e.response ? JSON.stringify(e.response.data) : e.message;
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ DN:', info);
        } finally {
            console.log('‚û°Ô∏è  –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º RP...');
            exec(`npx forever stop ${RP_SCRIPT}`, err => {
                if (err) {
                    console.error('‚ùå RP –Ω–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:', err.message);
                    process.exit(1);
                }
                console.log('‚úÖ RP –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
            });
        }
    });

// –ö–æ–º–∞–Ω–¥–∞ restart: stop + –ø–∞—É–∑–∞ + start
cli
    .command('restart')
    .description('–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–ª–∞—Å—Ç–µ—Ä')
    .action(async () => {
        await cli.parseAsync(['node', 'beeDBd.js', 'stop']);
        await new Promise(r => setTimeout(r, 1000));
        await cli.parseAsync(['node', 'beeDBd.js', 'start']);
    });

// –ö–æ–º–∞–Ω–¥–∞ status: —Å—Ç–∞—Ç—É—Å DN —á–µ—Ä–µ–∑ RP
cli
    .command('status')
    .description('–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö DN –ø–æ —É–∑–ª–∞–º')
    .action(async () => {
        try {
            const r = await axios.get(`${RP_URL}/admin/status`);
            const data = r.data?.resp?.data || r.data?.data;
            for (const nodeId in data) {
                console.log(`\nüì¶ –£–∑–µ–ª ${nodeId}:`);
                console.table(data[nodeId]);
            }
        } catch (e) {
            console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å:', e.message);
            process.exit(1);
        }
    });


// –ö–æ–º–∞–Ω–¥–∞ stats: —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ DB —á–µ—Ä–µ–∑ RP
cli
    .command('stats')
    .description('–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É DB')
    .action(async () => {
        try {
            const r = await axios.get(`${RP_URL}/stats`);
            console.dir(r.data.data, { depth: null });
        } catch (e) {
            console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É:', e.message);
            process.exit(1);
        }
    });

cli.parse(process.argv);
