// fileStore.js
const fs = require('fs-extra');
const path = require('path');
const md5 = require('md5');
const logger = require('./logger');

function getFilePath(dataDir, key) {
    return path.join(dataDir, `${md5(key)}.json`);
}

async function saveKeyValue(dataDir, key, value) {
    const filePath = getFilePath(dataDir, key);
    try {
        await fs.outputJson(filePath, { key, value });
        logger.info(`üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: ${key} ‚Üí ${filePath}`);
    } catch (err) {
        logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ ${key}: ${err}`);
        throw err;
    }
}

async function readKeyValue(dataDir, key) {
    const filePath = getFilePath(dataDir, key);
    try {
        const data = await fs.readJson(filePath);
        logger.info(`üìñ –ü—Ä–æ—á–∏—Ç–∞–Ω–æ: ${key} ‚Üí ${filePath}`);
        return data;
    } catch (err) {
        logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ ${key}: ${err}`);
        throw err;
    }
}

async function deleteKeyValue(dataDir, key) {
    const filePath = getFilePath(dataDir, key);
    try {
        await fs.remove(filePath);
        logger.info(`üóë –£–¥–∞–ª—ë–Ω –∫–ª—é—á: ${key}`);
    } catch (err) {
        logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ ${key}: ${err}`);
        throw err;
    }
}

async function keyExists(dataDir, key) {
    const filePath = getFilePath(dataDir, key);
    return fs.pathExists(filePath);
}

module.exports = {
    saveKeyValue,
    readKeyValue,
    deleteKeyValue,
    keyExists
};
